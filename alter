#!/usr/bin/env python3

import sys
import os
import json
import openai
import time
import shutil
from datetime import datetime
from colorama import Fore, Back


def read_api_key():
    try:
        with open(os.path.expanduser("~/.openai/openai_api_key.txt"), "r") as f:
            return f.read().strip()
    except FileNotFoundError:
        print(Fore.RED + "Error: Unable to find the OpenAI API key file at '~/.openai/openai_api_key.txt'.")
        sys.exit(1)


def generate_tool_description():
    return {
        "role": "system",
        "content": (
            """There are existing files that will be provided in the user message.
            Please alter according to the request.  It's possible you will send back a different number of fiels to what is sent in.
            Your response must be json structured as follows:
            * reply  - a message to be shown to the user after the script is created.
            *  files: an array of {filename, content} objects.
            always return the entire file in content.   Only return files that were changed.
            the most important thing is that your response is well formatted json with no other tokens."""
        ),
    }


def alter_tool(api_key, tool_description, files, request):
    openai.api_key = api_key

    source_files = {}
    for file in files:
        with open(file, "r") as f:
            source_files[os.path.basename(file)] = f.read()
    tool_info = {
        "files": source_files,
        "request": request,
    }
    tool_info_json = json.dumps(tool_info)

    conversation = [
        tool_description,
        {
            "role": "user",
            "content": tool_info_json,
        },
    ]
    # print(f"--- input ---\n{json.dumps( conversation)}")
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=conversation,
    )

    try:
        return json.loads(response.choices[0].message.content)
    except json.JSONDecodeError:
        print(Fore.RED + "Failed to parse the response as JSON.")
        print(response.choices[0].message.content)
        sys.exit(1)


def backup_and_save_tool(tool_json):
    reply = tool_json.get("reply", "")
    files = tool_json.get("files", [])

    for file in files:
        filename = file.get("filename", "")
        content = file.get("content", "")

        if os.path.exists(filename):
            parent_dir = os.path.dirname(filename)
            backup_dir = os.path.join(parent_dir, "bak")
            if not os.path.exists(backup_dir):
                os.makedirs(backup_dir)

            timestamp = time.strftime("%Y%m%d-%H%M%S")
            backup_filename = f"{os.path.basename(filename)}_{timestamp}.bak"
            backup_filepath = os.path.join(backup_dir, backup_filename)

            with open(filename, "r") as src_file, open(backup_filepath, "w") as backup_file:
                backup_file.write(src_file.read())

            print(Fore.YELLOW + f"Backed up {filename} to {backup_filepath}")

        with open(filename, "w") as dst_file:
            dst_file.write(content)

        print(Fore.YELLOW + f"Replaced content in {filename}")

    print(Fore.GREEN + reply)


def main():
    api_key = read_api_key()

    files = []
    for arg in sys.argv[1:]:
        if os.path.isfile(arg):
            files.append(arg)
        else:
            break

    request = " ".join(sys.argv[len(files) + 1 :])
    tool_description = generate_tool_description()
    tool_json = alter_tool(api_key, tool_description, files, request)
    backup_and_save_tool(tool_json)


if __name__ == "__main__":
    main()
